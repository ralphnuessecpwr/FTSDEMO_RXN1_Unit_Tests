#!/usr/bin/env groovy
import hudson.model.*
import hudson.EnvVars
import groovy.json.JsonSlurperClassic
import groovy.json.JsonBuilder
import groovy.json.JsonOutput
import java.net.URL
import groovy.io.FileType

//Compuware Envirnoment to connect, need to bee defined in Jenkins via Credentials Dialogs and Plugin Dialogs
String CES_Connection    = "Hddrxm0CES"                            //Connection String to CES
String HCI_Conn_ID       = "8e0838c8-4445-42c5-b6db-e352d4b2c64a"  //Connection String to HCI      
String HCI_Token         = "dde8dbfc-7818-436d-8b4b-0101c9734285"   //Credentials for HCI
String CES_Token         = "665fc9fb-39de-428a-8a67-a3619752873d"   //Credentials for CES

// ISPW Variables for promote/deploy/generate/regress operations
String ISPW_ContainerType   = "assignments" //Valid values are assignments or releases
String ISPW_RuntimeConfig   = "ISPW"
String ISPW_Target_Level    = "STG"

// Git Parameters
String Git_User         = "ralphnuessecpwr"
String Git_Credentials  = "87763671-db9a-47e1-80e7-33c1aba803b1"
String Git_Repo         = "${ISPW_Stream}_${ISPW_Application}_Unit_Tests.git"
String Git_URL          = "https://github.com/${Git_User}/${Git_Repo}"
String Git_Branch       = "master"

// Directories for source and tests that are downloaded to the jenkins workspace
String MF_Source_tmp        = "MF_Source"           // The ISPW Plugin will download sources to the folder, this will contain only the currently promoted sources
String MF_Source_final      = "MF_Source_final"     // This folder will contain all sources across several executions of the pipeline
                                                    // This folder will be passed to the SonarQuba Scanner

String ProjDir              = ".\\" + ISPW_Application          // Root folder within workspace for the ISPW Application
String TDir                 = ProjDir + "\\" + MF_Source_tmp    // Subfolder in the project folder for temporary sources (s.above)
String FDir                 = ProjDir + "\\" + MF_Source_final  // Subfolder in the project folder for final sources (s.above)

// TTT and COCO
String CC_repository        = "HDDRXM0.DEMO.COCO.REPOS"
String CC_DDIO_Override     = "SALESSUP.${ISPW_Application}.${ISPW_Src_Level}.SSD"

// SonarQube
String SQ_Project           = "Ralph_Madrid"

// XL Release template to trigger / XL Release user to connect with / The
String XLR_Template         = "A Release from Jenkins"  // XL Release template to invoke at the end of the Jenkins workflow
String XLR_User             = "xebialabs"               // XL Release user ID. Configured in Jenkins/Manage Jenkins/Configure System/XL Release credentials
String XLR_Release          = "GENA Q2"

// One node with several stages => All variables are local to the node and available to all stages
node{
    
    // Determine the last character of the ISPW level to identify the path within the life cycle
    def String PathIdx = ISPW_Src_Level.charAt(ISPW_Src_Level.length() - 1)
    // Use the Path Index to determine the right Runner JCL to use (different STEPLIB concatenations)
    def String TTT_Jcl = "Runner_PATH${PathIdx}.jcl"
    
/*
    stage("Generate Programs")
    {
        // Define variables to be used to call ISPW
        def ISPWFunction        
        def ces                 
        def runtimeconfig       
        def containerType       
        def operation           
        def container           
        def level               
        def token      

        // Compile code for the container
        ISPWFunction        = " -ISPWFunction ContainerOperation"
        ces                 = " -ces " + "${CES_Connection}"
        runtimeconfig       = " -runtimeconfig ${ISPW_RuntimeConfig}"
        containerType       = " -containerType ${ISPW_ContainerType}"
        operation           = " -operation generate"
        container           = " -container " + "${ISPW_Container}"
        level               = " -level " + "${ISPW_Src_Level}"
        token               = " -token " + "${CES_Token}"
        bat "powershell c:\\ISPW\\ISPW_Operations.ps1" + ISPWFunction + ces + runtimeconfig + containerType + operation + container + level + token
    }
*/

    println "******************************"
    println "Download Source Code from ISPW"
    println "******************************"

    // Delete the contents of the MF_Source_tmp Directory, so that only newly downloaded sources get handled
    dir(TDir) 
    {
        deleteDir()
    }
    
    // Create the MF_Source_final Directory, if it does not exist
    if( fileExists(FDir))
    {
        println "FDir: " + FDir + " exists"
    }
    else
    {
        dir(ProjDir) 
        {
            bat "mkdir ${MF_Source_final}"
        }        
    }
      
    stage("Download Source Code")
    {
        checkout(changelog: false, poll: false, 
            scm: [$class: 'IspwConfiguration', 
                componentType: 'COB, COPY', 
                connectionId: "${HCI_Conn_ID}", 
                credentialsId: "${HCI_Token}", 
                folderName: '', 
                levelOption: '0', 
                serverApplication: "${ISPW_Application}", 
                serverConfig: "${ISPW_RuntimeConfig}", 
                serverLevel: "${ISPW_Src_Level}", 
                serverStream: "${ISPW_Stream}"])
    }

    // Copy downloaded sources from MF_Source to MF_Source_final
    dir(ProjDir)
    {
        bat "copy ${MF_Source_tmp}\\*.* ${MF_Source_final}"
    }

    println "*******************"
    println "Download Unit Tests"
    println "*******************"    

    stage("Download Unit Tests")
    {
        checkout changelog: false, poll: false, 
            scm: [$class: 'GitSCM', 
                branches: [[name: "*/${Git_Branch}"]], 
                doGenerateSubmoduleConfigurations: false, 
                extensions: [], 
                submoduleCfg: [], 
                userRemoteConfigs: [[credentialsId: "${Git_Credentials}", name: 'origin', url: "${Git_URL}"]]]
    }

    println "*************************"
    println "Loop through TTT projects"
    println "*************************"

    // findFiles requires the "Pipeline Utilities Plugin"
    // Get all testscenario files in the current workspace into an array of type File
    def ListOfScenarios = findFiles(glob: '**/*.testscenario')

    // Get all Sources in the MF_Source_tmp folder into an array
    def ListOfSources  = findFiles(glob: "**/${ISPW_Application}/${MF_Source_tmp}/*.cbl")

    // Loop through all downloaded TTT scenarios
    ListOfScenarios.each
    {
        def ScenarioPath = it.path
        // Get root node of the path, i.e. the name of the TTT project
        // The split method uses regex to search for patterns, therefore
        // Backslahes, Dots and Underscores which mean certain patterns in regex need to be escaped 
        // The backslash in Windows paths is duplicated in Java, therefore it need to be escaped twice
        def ProjectName         = it.path.trim().split("\\\\")[0]   // TTT Project name is the root folder of the full path to the testscenario 
        def ScenarioFullName    = it.name                           // Get the full name of the testscenario file i.e. "name.testscenario"
        def ScenarioName        = it.name.trim().split("\\.")[0]    // Get the name of the scenario file without ".testscenario"
        def ScenarioTarget      = ScenarioName.split("\\_")[0]      // Target Program will be the first part of the scenario name (convention)

        // For each of the scenarios walk through the list of new scources and determine if the target matches one of the programs
        // In that case, execute the unit test
        ListOfSources.each
        {
            //Determine if the program name matches the target of the TTT scenario
            if(it.name.trim().split("\\.")[0] == ScenarioTarget)
            {
                println "*************************"
                println "Scenario " + ScenarioFullName
                println "Path " + ScenarioPath
                println "Project " + ProjectName
                println "*************************"
            
                stage("TTT Project ${ProjectName}, Scenario ${ScenarioFullName}")
                {
                    step([$class: 'TotalTestBuilder', 
                        ccClearStats: false,
                        ccRepo: "${CC_repository}",
                        ccSystem: "${ISPW_Application}_${ProjectName}", 
                        ccTestId: "${BUILD_DISPLAY_NAME}",  //Jenkins environemnt variable, resolves to build number, i.e. #177 
                        credentialsId: "${HCI_Token}", 
                        deleteTemp: true, 
                        hlq: '', 
                        connectionId: "${HCI_Conn_ID}",
                        jcl: "${TTT_Jcl}", 
                        projectFolder: "${ProjectName}", 
                        testSuite: "${ScenarioFullName}", 
                        useStubs: true])
                    
                    // Process the Total Test result files into Jenkins
                    junit keepLongStdio: true, testResults: 'TTTUnit/*.xml'
                }
            }
        }
    }

    println "****************"
    println "Gather CoCo Data"
    println "****************"

    stage("Gather CoCo Data")
    {
        string sources="${ISPW_Application}\\MF_Source"
        def ccproperties   = 'cc.sources=' + sources + '\rcc.repos=' + CC_repository + '\rcc.system=' + ISPW_Application + "*" + '\rcc.test=' + BUILD_DISPLAY_NAME + '\rcc.ddio.overrides=' + CC_DDIO_Override

        step([$class: 'CodeCoverageBuilder',
            analysisProperties: ccproperties,
                analysisPropertiesPath: '',
                connectionId: "${HCI_Conn_ID}",
                credentialsId: "${HCI_Token}"])
    }

    println "******************"
    println "SonarQube analysis"
    println "******************"

    stage("SonarQube analysis") 
    {
        // Requires SonarQube Scanner 2.8+
        def scannerHome = tool 'Scanner';

        ListOfScenarios.each
        {
            def ScenarioPath = it.path
            def ProjectName = it.path.trim().split("\\\\")[0] 
            def ScenarioName = it.name.trim().split("\\.")[0]

            withSonarQubeEnv('CWCC') 
            {
                // Run SonarQube Scanner 
                def SQ_Tests                = " -Dsonar.tests=${ProjectName} -Dsonar.testExecutionReportPaths=TTTSonar/${ScenarioName}.xml -Dsonar.coverageReportPaths=Coverage/CodeCoverage.xml"
                def SQ_ProjectKey           = " -Dsonar.projectKey=${SQ_Project} -Dsonar.projectName=${SQ_Project} -Dsonar.projectVersion=1.0"
                // Use MF_Source_final diractory which contains all sources, i.e. downloaded and old ones
                def SQ_Source               = " -Dsonar.sources=${ISPW_Application}\\${MF_Source_final}"
                def SQ_Copybook             = " -Dsonar.cobol.copy.directories=${ISPW_Application}\\${MF_Source_final}"
                def SQ_Cobol_conf           = " -Dsonar.cobol.file.suffixes=cbl,testsuite,testscenario,stub -Dsonar.cobol.copy.suffixes=cpy -Dsonar.sourceEncoding=UTF-8"
                bat "${scannerHome}/bin/sonar-scanner" + SQ_Tests + SQ_ProjectKey + SQ_Source + SQ_Copybook + SQ_Cobol_conf
            }
        }
    }


    println "******************"
    println "Check Quality Gate"
    println "******************"

    stage("Check Quality Gate")
    {
        // Wait for webhook call back from SonarQube
        def qg = waitForQualityGate()

        timeout(time: 2, unit: 'MINUTES') 
        {
            if (qg.status != 'OK')
            {
                println "**********************************************************"
                println "Pipeline aborted due to quality gate failure: ${qg.status}"
                println "Will regress assignemt: ${ISPW_Container}, Level: ${ISPW_Src_Level}"
                println "**********************************************************"

                // If the quality gate is anything other than Green, regress the promoted code
                def ISPW_Container_Parm        = "${ISPW_Container_Type}Id=" + ISPW_Container
                def ISPW_Level_Parm             = '\nlevel=' + ISPW_Src_Level
                def ISPW_Runtime_Config_Parm    = '\nruntimeConfiguration=' + ISPW_RuntimeConfig
                def ISPW_Remain_Parms           = '\nevents.name=Completed\nevents.body=Regressed\nevents.httpHeaders=Jenkins-Crumb:no-crumb\nevents.credentials=admin:library'

                def ISPW_Parms = ISPW_Container_Parm + ISPW_Level_Parm + ISPW_Runtime_Config_Parm + ISPW_Remain_Parms
            
                if(ISPW_Container_Type == "assignment")
                {
                    ispwOperation consoleLogResponseBody: true,
                        connectionId: HCI_Conn_ID, 
                        credentialsId: CES_Connection, 
                        ispwAction: 'RegressAssignment', 
                        ispwRequestBody: ISPW_Parms
                }
                else
                {
                    ispwOperation consoleLogResponseBody: true,
                        connectionId: HCI_Conn_ID, 
                        credentialsId: CES_Connection, 
                        ispwAction: 'RegressRelease', 
                        ispwRequestBody: ISPW_Parms                
                }

                error "Exiting Pipeline"
            }
            else
            {
                println "**********************************************************"
                println "Quality Gate status is: {${qg.status}"
                println "Will Start XP Release"
                println "**********************************************************"

                stage("Start Release")
                {
                    // Trigger XL Release Jenkins Plugin to kickoff a Release
                    xlrCreateRelease releaseTitle: 'Release for $BUILD_TAG', 
                        serverCredentials: "${XLR_User}", 
                        startRelease: true, 
                        template: "${XLR_Template}", 
                        variables: [[propertyName: 'ISPW_Dev_level', propertyValue: "${ISPW_Src_Level}"], 
                            [propertyName: 'ISPW_Stg_Level', propertyValue: "${ISPW_Target_Level}"], 
                            [propertyName: 'ISPW_RELEASE_ID', propertyValue: "${XLR_Release}"], 
                            [propertyName: 'CES_Token', propertyValue: "${CES_Token}"]]
                }
            }
        }
    }   
}

    
    /*
    stage("Promote Code")
    {
        def ISPW_Parms = 'assignmentId=' + ISPW_Container + '\nlevel=' + ISPW_Src_Level + '\nruntimeConfiguration=' + ISPW_RuntimeConfig + '\nevents.name=Complete\nevents.body=Promoted\nevents.httpHeaders=Jenkins-Crumb:no-crumb\nevents.credentials=admin:library'
        
        ispwOperation connectionId: HCI_Conn_ID, 
        credentialsId: CES_Connection, 
        ispwAction: 'PromoteAssignment', 
        ispwRequestBody: ISPW_Parms
    }
    */
/*

File f = new File( dateiname );
byte[] buffer = new byte[ (int) f.length() ];
InputStream in = new FileInputStream( f );
in.read( buffer );
in.close();

    stage("Run Integration Test Job")
    {
        step([$class: 'ZOSJobSubmitter', 
            JESINTERFACELEVEL1: false, 
            MaxCC: '0000', 
            deleteJobFromSpool: false, 
            job: 'JCL', 
            password: 'cpwr1804', 
            port: 21, 
            server: 'cwcc.compuware.com', 
            userID: 'hddrxm0', 
            wait: true, waitTime: 0])
    }
*/
