#!/usr/bin/env groovy
import hudson.model.*
import hudson.EnvVars
import groovy.json.JsonSlurperClassic
import groovy.json.JsonBuilder
import groovy.json.JsonOutput
import java.net.URL
import groovy.io.FileType

//Compuware Envirnoment to connect
String CES_Connection     = "Hddrxm0CES"
String HCI_Conn_ID        = "8e0838c8-4445-42c5-b6db-e352d4b2c64a"      

// Jenkins credential ID and CES Personal Access token to be used for mainframe access
String Jenkins_Id        = "dde8dbfc-7818-436d-8b4b-0101c9734285"      
String CES_Token         = "665fc9fb-39de-428a-8a67-a3619752873d"

// ISPW Levels and container to be used by the promote/deploy/generate/regress operations
String ISPW_Assignment      = "RXN1000003" //ContainerID of the assignment that you want to generate and promote
String ISPW_ContainerType   = "assignments" //Valid values are assignments or releases
String ISPW_RuntimeConfig   = "ISPW"
String ISPW_Next_Level       = "QA1"

// Directories for source and tests that are downloaded to the jenkins workspace
String MF_Source_tmp        = "MF_Source" 
String MF_Source_final      = "MF_Source_final" 

String ProjDir              = ".\\" + ISPW_Application
String TDir                 = ProjDir + "\\" + MF_Source_tmp
String FDir                 = ProjDir + "\\" + MF_Source_final

// TTT and COCO
String TTT_Jcl              = "Runner_${ISPW_Src_Level}.jcl"
String CC_repository        = "HDDRXM0.DEMO.COCO.REPOS"
String CC_DDIO_Override     = "SALESSUP.${ISPW_Application}.${ISPW_Src_Level}.SSD"

// SonarQube
String SQ_Project           = "Ralph_Madrid"

// XL Release template to trigger / XL Release user to connect with / The
String XLR_Template         = "A Release from Jenkins" // XL Release template to invoke at the end of the Jenkins workflow
String XLR_User             = "xebialabs"               // XL Release user ID. Configured in Jenkins/Manage Jenkins/Configure System/XL Release credentials
//String XLR_Release          = "GENA Q2"

node{
    /*
    stage("Generate Programs")
    {
        // Define variables to be used to call ISPW
        def ISPWFunction        
        def ces                 
        def runtimeconfig       
        def containerType       
        def operation           
        def container           
        def level               
        def token      

        // Compile code for the container
        ISPWFunction        = " -ISPWFunction ContainerOperation"
        ces                 = " -ces " + "${CES_Connection}"
        runtimeconfig       = " -runtimeconfig ${ISPW_RuntimeConfig}"
        containerType       = " -containerType ${ISPW_ContainerType}"
        operation           = " -operation generate"
        container           = " -container " + "${ISPW_Container}"
        level               = " -level " + "${ISPW_Src_Level}"
        token               = " -token " + "${CES_Token}"
        bat "powershell c:\\ISPW\\ISPW_Operations.ps1" + ISPWFunction + ces + runtimeconfig + containerType + operation + container + level + token
    }

    stage("Promote code")
    {
        // Define variables to be used to call ISPW
        def ISPWFunction        
        def ces                 
        def runtimeconfig       
        def containerType       
        def operation           
        def container           
        def level               
        def token      

        // Promote code for the container into a test level
        ISPWFunction        = " -ISPWFunction ContainerOperation"
        ces                 = " -ces " + "${CES_Connection}"
        runtimeconfig       = " -runtimeconfig ${ISPW_RuntimeConfig}"
        containerType       = " -containerType ${ISPW_ContainerType}"
        operation           = " -operation promote"
        container           = " -container " + "${ISPW_Container}"
        level               = " -level " + "${ISPW_Src_Level}"
        token               = " -token " + "${CES_Token}"
        bat "powershell c:\\ISPW\\ISPW_Operations.ps1" + ISPWFunction + ces + runtimeconfig + containerType + operation + container + level + token
    }
    */

    println "*************************"
    println "Download Source Code from ISPW"

    // Delete the contents of the MF_Source Directory, so that only newly downloaded sources get handled
    dir(TDir) 
    {
        deleteDir()
    }
    
    // Create the MF_Source_final Directory, if it does not exist
    if( fileExists(FDir))
    {
        println "FDir: " + FDir + " exists"
    }
    else
    {
        dir(ProjDir) 
        {
            bat "mkdir ${MF_Source_final}"
        }        
    }
      
    stage("Download Source Code from ISPW")
    {
        checkout(changelog: false, poll: false, 
            scm: [$class: 'IspwConfiguration', 
                componentType: 'COB, COPY', 
                connectionId: "${HCI_Conn_ID}", 
                credentialsId: "${Jenkins_Id}", 
                folderName: '', 
                levelOption: '0', 
                serverApplication: "${ISPW_Application}", 
                serverConfig: "${ISPW_RuntimeConfig}", 
                serverLevel: "${ISPW_Src_Level}", 
                serverStream: "${ISPW_Stream}"])
    }

    println "*************************"
    println "Get TTT projects from Git"

    // Copy downloaded sources from MF_Source to MF_Source_final
    dir(ProjDir)
    {
        bat "copy ${MF_Source_tmp}\\*.* ${MF_Source_final}"
    }

    stage("Get TTT projects from Git")
    {
        //Download the tests
        checkout changelog: false, poll: false, 
            scm: [$class: 'GitSCM', 
                branches: [[name: '*/master']], 
                doGenerateSubmoduleConfigurations: false, 
                extensions: [], 
                submoduleCfg: [], 
                userRemoteConfigs: [[credentialsId: '87763671-db9a-47e1-80e7-33c1aba803b1', name: 'origin', url: 'https://github.com/ralphnuessecpwr/CWXTCOB_Unit_Tests.git']]]
    }

    println "*************************"
    println "Loop through TTT projects"

    // findFiles requires the "Pipeline Utilities Plugin"
    // Get all testscenario files in the current workspace into a array of type File
    def ScenarioList = findFiles(glob: '**/*.testscenario')
    dir(FDir)
    {
        def SourcesList  = findFiles(glob: '**/*.cbl')

        println "Found Sources"
        SourcesList.each
        {
            println it.name
        }
    }
    
    ScenarioList.each
    {
        def ScenarioPath = it.path
        // Get root node of the path, i.e. the name of the TTT project
        // The backslash in Windows paths is duplicated in Java to escape the single backslash
        // Therefore it needs to be escaped twice now 
        def ProjectName = it.path.trim().split("\\\\")[0] 
        def Scenario = it.name
        def ScenarioRoot = it.name.trim().split("\\.")[0]

        println "*************************"
        println "Scenario " + Scenario
        println "Path " + ScenarioPath
        println "Project " + ProjectName
    
        stage("TTT Project ${ProjectName}, Scenario ${ScenarioRoot}")
        {

            step([$class: 'TotalTestBuilder', 
                ccClearStats: false,
                ccRepo: "${CC_repository}",
                ccSystem: "${ISPW_Application}_${ProjectName}", 
                ccTestId: "${BUILD_DISPLAY_NAME}",  //resolves to build number, i.e. #177 
                credentialsId: "${Jenkins_Id}", 
                deleteTemp: true, 
                hlq: '', 
                connectionId: "${HCI_Conn_ID}",
                jcl: "${TTT_Jcl}", 
                projectFolder: "${ProjectName}", 
                testSuite: "${Scenario}", 
                useStubs: true])
            
            // Process the Total Test result files into Jenkins
            junit keepLongStdio: true, testResults: 'TTTUnit/*.xml'

        }
    }

    println "*************************"
    println "Gather CoCo Data"

    stage("Gather CoCo Data")
    {
        string sources="${ISPW_Application}\\MF_Source"
        def ccproperties   = 'cc.sources=' + sources + '\rcc.repos=' + CC_repository + '\rcc.system=' + ISPW_Application + "*" + '\rcc.test=' + BUILD_DISPLAY_NAME + '\rcc.ddio.overrides=' + CC_DDIO_Override

        step([$class: 'CodeCoverageBuilder',
            analysisProperties: ccproperties,
                analysisPropertiesPath: '',
                connectionId: "${HCI_Conn_ID}",
                credentialsId: "${Jenkins_Id}"])
    }

    println "*************************"
    println "SonarQube analysis"

    stage("SonarQube analysis") 
    {
        // Requires SonarQube Scanner 2.8+
        def scannerHome = tool 'Scanner';

        //def ScenarioList = findFiles(glob: '**/*.testscenario')

        ScenarioList.each
        {
            def ScenarioPath = it.path
            // Get root node of the path, i.e. the name of the TTT project
            // The backslash in Windows paths is duplicated in Java to escape the single backslash
            // Therefore it needs to be escaped twice now 
            def ProjectName = it.path.trim().split("\\\\")[0] 
            def ScenarioRoot = it.name.trim().split("\\.")[0]

            withSonarQubeEnv('CWCC') 
            {
                // Run SonarQube Scanner 
                // Use MF_Source_final diractory which contains all sources ... downloaded and old ones
                def SQ_Tests                = " -Dsonar.tests=${ProjectName} -Dsonar.testExecutionReportPaths=TTTSonar/${ScenarioRoot}.xml -Dsonar.coverageReportPaths=Coverage/CodeCoverage.xml"
                def SQ_ProjectKey           = " -Dsonar.projectKey=${SQ_Project} -Dsonar.projectName=${SQ_Project} -Dsonar.projectVersion=1.0"
                def SQ_Source               = " -Dsonar.sources=${ISPW_Application}\\${MF_Source_final}"
                def SQ_Copybook             = " -Dsonar.cobol.copy.directories=${ISPW_Application}\\${MF_Source_final}"
                def SQ_Cobol_conf           = " -Dsonar.cobol.file.suffixes=cbl,testsuite,testscenario,stub -Dsonar.cobol.copy.suffixes=cpy -Dsonar.sourceEncoding=UTF-8"
                bat "${scannerHome}/bin/sonar-scanner" + SQ_Tests + SQ_ProjectKey + SQ_Source + SQ_Copybook + SQ_Cobol_conf
            }
        }
    }

/*
    println "*************************"
    println "Check Quality Gate"

    stage("Check Quality Gate")
    {
        // Wait for webhook call back from SonarQube
        def qg = waitForQualityGate()

        if (qg.status != 'OK')
        {
            println "**********************************************************"
            println "Pipeline aborted due to quality gate failure: ${qg.status}"
            
            // If the quality gate is anything other than Green, regress the promoted code
            ISPWFunction        = " -ISPWFunction ContainerOperation"
            ces                 = " -ces " + "${CES_Connection}"
            runtimeconfig       = " -runtimeconfig ${ISPW_RuntimeConfig}"
            containerType       = " -containerType ${ISPW_ContainerType}"
            operation           = " -operation regress"
            container           = " -container " + "${ISPW_Container}"
            level               = " -level " + "${ISPW_Stg_Level}"
            token               = " -token " + "${CES_Token}"
            bat "powershell c:\\ISPW\\ISPW_Operations.ps1" + ISPWFunction + ces + runtimeconfig + containerType + operation + container + level + token
            
            error "Exiting Pipeline"
        }
        else
        {
            println "**********************************************************"
            println "Quality Gate status is: {${qg.status}"
        }
    }   
    }
    */

    /*
    stage("Promote Code")
    {
        def ISPW_Parms = 'assignmentId=' + ISPW_Assignment + '\nlevel=' + ISPW_Src_Level + '\nruntimeConfiguration=' + ISPW_RuntimeConfig + '\nevents.name=Complete\nevents.body=Promoted\nevents.httpHeaders=Jenkins-Crumb:no-crumb\nevents.credentials=admin:library'
        
        ispwOperation connectionId: HCI_Conn_ID, 
        credentialsId: CES_Connection, 
        ispwAction: 'PromoteAssignment', 
        ispwRequestBody: ISPW_Parms
    }
    */
/*

File f = new File( dateiname );
byte[] buffer = new byte[ (int) f.length() ];
InputStream in = new FileInputStream( f );
in.read( buffer );
in.close();

    stage("Run Integration Test Job")
    {
        step([$class: 'ZOSJobSubmitter', 
            JESINTERFACELEVEL1: false, 
            MaxCC: '0000', 
            deleteJobFromSpool: false, 
            job: 'JCL', 
            password: 'cpwr1804', 
            port: 21, 
            server: 'cwcc.compuware.com', 
            userID: 'hddrxm0', 
            wait: true, waitTime: 0])
    }
*/
}